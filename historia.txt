Esta es la hirtoria de Jonathan

Tiene 33 años y vive en Bogotá colombia

Esta haciendo los cursos de Platzi

1. git rm --cached XXXXXXXXX => Elimina el ultimo add hecho sobre el archivo XXXXXXXXX

    
    git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
    git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

2. con git config user.name y user.email sin --global se reemplaza la firma de los cambios solo en el proyecto actual, para los demas se mantiene la configuración global

3. git show XXXXX muestra los cambios realizados a un archivo entre la ultima versión y la anterior

4. con git reset XX (id del commit a direccionar) --hard se borra todo y se deja al estado del id dado, --soft se mantienen los add en stagin (memoria) y se resetea el codigo.
    
    git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
    git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
    git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

Se pueden crear mas archivos mientras se tiene en memoria otros cambios pendientes por confirmar

5. con git log --stat se pueden ver claramente los cambios realizados en cada commit

6. con git checkout "id" donde id es el id del commit realizado en un momento dado, puedo traer un archivo en especifico y puedo volver al archivo de la rama master reemplazando el id por master

7. Comandos a usar con un servidor remoto

    git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
    git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
    git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
    git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
    git pull: Básicamente, git fetch y git merge al mismo tiempo.

8. Uso de git commit -am "Comentario" - Se puede usar siempre y cuando los archivos ya tengan un add previamente, no para archivos nuevos, automaticamente hace el add y commit.

9. Comandos utiles

    git checkout –b // creará una nueva rama y saltará a ella de forma inmediata

    git branch --list // listará las ramas existentes

    git branch --delete [nombreRama] // borrará la rama que se indique

    git branch –D [nombreRama] // fuerza la eliminación de ramas que aún no han sido fusionadas

    git branch –v // muestra el último commit de cada rama

    git branch --merged // lista las ramas que se fusionaron con la rama actual

    git branch --no-merged // lista las ramas que no se han fusionado con la rama actual

    git merge --abort // anula el merge y devuelve todo a como estaba antes